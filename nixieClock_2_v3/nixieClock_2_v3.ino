/*
  Скетч к проекту "Часы на ГРИ версия 3.5"
  платы тут https://easyeda.com/technotrasher/nixie_clock_pcb_in14
*/

/*
                       При прошивке скетча отключать модуль ESP!!!!!!!!!!!!!!!!!!!!!!
  Управление:
  - Настройка времени:
    - Левая кнопка - выбор, остальные "больше" и "меньше"
    - Удержать "выбор" первый раз btnSet - настройка времени
    - Клик по "выбору" btnSet - смена настройки часы/минуты
    - Клик "больше" и "меньше" - изменение времени
    - Удержать "выбор" второй раз - настройка будильника
    - Левая кнопка - выбор, остальные "больше" и "меньше"
    - Удержать "выбор" третий раз - установка даты и месяца
    - Удержать "выбор" четвертый раз - установка года
    - Удержать "выбор" btnSet - настройка времени
    - Клик по "выбору" btnSet - смена настройки часы/минуты
    - Клик "больше" и "меньше" - изменение времени
    - Удержать "выбор" - возврат к показу времени
    - Удержание "больше" - отображение даты. вид - день. месяц. день недели. для выхода нажать и удержать повторно

    В модуле ESP в строке 58 указать свои настройки. имя точки вайфай и пароль к точке доступа. кавычки не трогать.
    В библиотеке wire - если на плате нет подтяжки пинов A4 A5 к vcc через резисторы 4.7кОм, то заменить строку
  PORTC &= 0xCF; //отключаем подтяжку SDA и SCL
  на строку
  PORTC |= 0x30; //включаем подтяжку SDA и SCL

  Подсветка
  1. режим отображения СО2 - ppm больше 1000, то цвет ярко красный
  2. отображение давления - синий цвет всех светодиодов
  3. Влажность - ниже 32% цвет зеленовато-желтый, 32-40 - желтый, больше 40 - изумрудный
  4. температура ниже нуля - цвет первых двух светодиодов синий
  5. температура с датчика выносного DS - первый светодиод голубой
 

  - Управление эффектами В РЕЖИМЕ ЧАСОВ:
    - Клик по кнопке btnUp переключает режимы подсветки ламп
    - выключена
    - выключена, но данные с датчиков подсвечиваются
    - постоянный свет
    - палитра PartyColors
    - палитра RainbowStripeColors
    - палитра CloudColors
    - Клик по кнопке btnDwn переключает режимы перелистывания цифр
      - Без эффекта
      - Плавное угасание
      - Перемотка по порядку числа
      - Перемотка по катодам
      - Поезд
      - Резинка
      - Блики
      - Перемотка со смещением

  Удержание кнопки btnUp
  - показ даты.
  для возврата удержать кнопку повторно

  Удержание кнопки btnDown
  - отключает запрос времени из интернета через модуль ESP (изначально включено) 0 = SHOW_ESP - выкл. 1 = SHOW_ESP - вкл
 
  Двойной клик по btnUP - смена часового пояса. работает только при работе модуля ESP
  после двойного нажатия - сигнал длиннее прозвучит (1 = esptime - лето 0 = esptime - зима)
  Одинарный клик по btnSet - включение/отключение эффекта секунд без эффекта, угасание, перемотка


*/
// ************************** НАСТРОЙКИ **************************
#define DUTY 190  // скважность ШИМ. От скважности зависит напряжение! у меня 175 вольт при значении 180 и 145 вольт при 120

// ======================= ЭФФЕКТЫ =======================
// эффекты перелистывания часов
uint8_t FLIP_EFFECT = 1;
// Выбранный активен при запуске и меняется кнопками
// 0 - нет эффекта
// 1 - плавное угасание и появление (рекомендуемая скорость: 100-150)
// 2 - перемотка по порядку числа (рекомендуемая скорость: 50-80)
// 3 - перемотка по порядку катодов в лампе (рекомендуемая скорость: 30-50)
// 4 - поезд (рекомендуемая скорость: 50-170)
// 5 - резинка (рекомендуемая скорость: 50-150)
// 6 - блики (рекомендуемая скорость: 80-250)
uint8_t FLIP_SPEED[] = { 0, 100, 100, 50, 70, 70, 150, 70 };  // скорость эффектов, мс (количество не меняй) 0, 130, 50, 40, 70, 70, 200, 90

// эффекты подсветки
uint8_t BACKL_MODE = 1;
// Выбранный активен при запуске и меняется кнопками
// 0 - выключена полностью
// 1 - выключена, но работает при отображении СО2 и т.д.
// 2 - постоянный свет
// 3 - радуга
// 4 - градиент
// 5 - рандомный цвет
// 6 - волна
// 7 - дыхание
// 8 - бегущий огонь

// =======================  ЯРКОСТЬ =======================
#define NIGHT_START 22  // час перехода на ночную подсветку (BRIGHT_N)
#define NIGHT_END 8     // час перехода на дневную подсветку (BRIGHT)

#define INDI_BRIGHT 22   // яркость цифр дневная (1 - 24) !на 24 могут быть фантомные цифры! 23
#define INDI_BRIGHT_N 7  // яркость ночная (1 - 24) 5
uint8_t SHOW_SEC = 0;   // переключение эффектов секунд. 0 -  выключен

#define DOT_BRIGHT 70    // яркость точки дневная (1 - 255) 80
#define DOT_BRIGHT_N 25  // яркость точки ночная (1 - 255)

#define BACKL_BRIGHT 80    // макс. яркость подсветки дневная (0 - 255) 80
#define BACKL_BRIGHT_N 30  // макс. яркость подсветки ночная (0 - 255, 0 - подсветка выключена)
//https://colorscheme.ru/color-converter.html

// =======================  ГЛЮКИ =======================
#define GLITCH_MIN 30   // минимальное время между глюками, с
#define GLITCH_MAX 120  // максимальное время между глюками, с

#define train_MIN 300  // минимальное время между поездом, с 180
#define train_MAX 600  // максимальное время между поездом, с 300

#define test_MIN 1000  // минимальное время между перебором индикаторов, с 1000
#define test_MAX 2000  // максимальное время между перебором индикаторов, с  20

// ======================  МИГАНИЕ =======================
#define DOT_TIME 500  // время мигания точки, мс
#define DOT_TIMER 25  // шаг яркости точки, мс

// ==================  АНТИОТРАВЛЕНИЕ ====================
#define BURN_TIME 5     // период обхода индикаторов в режиме очистки, мс
#define BURN_LOOPS 6    // количество циклов очистки за каждый период
#define BURN_PERIOD 39  // период антиотравления, минут


// *********************** ДЛЯ РАЗРАБОТЧИКОВ ***********************
uint8_t FLIP_EFFECT_NUM = sizeof(FLIP_SPEED);  // количество эффектов

// --------- БУДИЛЬНИК ---------
#define ALM_TIMEOUT 30  // таймаут будильника
#define FREQ 900        // частота писка будильника

// ************************** НАСТРОЙКИ **************************
#define TEMP_TIME 7      // время (с), НА которое отображаются температура и влажность
#define TEMP_PRES 202    // время (с), через которое отображается давление 202
#define TEMP_CO2 271     // время (с), через которое отображается содержание СО2 //330 271
#define CLOCK_TIME 120   // время (с), через которое отображаются температура и влажность
#define SHOW_TEMP_HUM 1  // 0 - не показывать температуру и вл., 1 - показывать
#define SHOW_PRES 1      // 0 - не показывать давление, 1 - показывать
#define SHOW_CO2 1       // 0 - не показывать CO2, 1 - показывать
#define SHOW_TEMP_DS 0   // 0 - не показывать температуру с датчика DS18B20, 1 - показывать
#define SHOW_TR 1        // 0 - не показывать эффект поезд
#define SHOW_TEST 1      // 0 - перебор индикаторов
#define SHOW_GL 1        // 0 - глюк

// ******************************ESP ******************************
bool SHOW_ESP = 1;   // включение запроса от ESP  установить 1 для включения
#define ESP_TIME 3600  // время (с) время опроса ESP 1 час - 3600 с, 610 - 10 мин, 10800 - 3 часа

// ****************************** подсветка ***********************
#define NUM_LEDS 6  //  количество светодиодов

#define BACKL_REVERSE 0        //реверс порядка светодиодов WS2812B(0 - нормальное отображение | 1 - реверсивное отображение)(только для светодиодов WS2812B)
#define BACKL_MODE_3_TIME 220  //скорость шага эффекта подсветки номер 2(4..100)(мс)
#define BACKL_MODE_3_STEP 10   //размер шага эффекта подсветки номер 2(1..50)
#define BACKL_MODE_4_STEP 20   //размер шага эффекта подсветки номер 3(1..50)
#define BACKL_MODE_5_TIME 1500  //скорость эффекта подсветки номер 5(10..50)(мс)
#define BACKL_MODE_6_COLOR 5  //шаг изменения цвета эффекта подсветки номер 6(5..50)
#define BACKL_MODE_6_TIME 280  //скорость эффекта подсветки номер 6(50 - 1000)(мс)
#define BACKL_MODE_6_STEP 5    //минимальный размер шага яркости подсветки номер 6(4..50)(мс)
#define BACKL_MODE_7_STEP 3    //минимальный размер шага яркости подсветки номер 6(4..50)(мс)
#define BACKL_MODE_7_TIME 1000  //скорость эффекта подсветки номер 6(50 - 1000)(мс)
#define BACKL_MODE_7_COLOR 20  //шаг изменения цвета эффекта подсветки номер 6(5..50)
#define BACKL_MODE_8_FADING 5  //количество шагов декркминента яркости эффекта подсветки номер 4(5..50)
#define BACKL_MODE_8_COLOR 10  //шаг изменения цвета эффекта подсветки номер 6(5..50)
#define BACKL_MODE_8_TIME 300  //скорость эффекта подсветки номер 6(50 - 1000)(мс)


// пины
#define PIEZO_PORT 2   // пищалка D2
#define KEY0 3         // часы D3
#define KEY1 4         // часы D4
#define KEY2 5         // минуты D5
#define KEY3 6         // минуты D6
#define KEY4 7         // секунды D7
#define KEY5 8         // секунды D8
#define GEN 9          // генератор D9
#define DOT 10         // точка D10
#define BACKL 12       // порт подсветки D12
#define ALARM_PIN A6   //кнопка будильника
#define BTN A7         // кнопки
#define PWMPIN_CO2 11  // датчик СО2
#define PIN_DS 13      // датчик DS18B20 D13

/*********************** MODES ***********************/
#define Clock 0
#define Temperature 1
#define AlarmSet 2
#define ClockSet 3
#define DataSet 4
#define DataSetY 5
#define Pressure 6
#define CO2 7
#define DATES 8

// дешифратор
#define DECODER0 A0
#define DECODER1 A1
#define DECODER2 A2
#define DECODER3 A3

//Соединения периферии с портами МК
//    PORTD (0 - D0 | 1 - D1 | 2 - D2 | 3 - D3 | 4 - D4 | 5 - D5 | 6 - D6 | 7 - D7)
//    PORTB (0 - D8 | 1 - D9 | 2 - D10 | 3 - D11 | 4 - D12 | 5 - D13)
//    PORTC (0 - A0 | 1 - A1 | 2 - A2 | 3 - A3 | 4 - A4 | 5 - A5)

#define DDR_REG(portx) (*(&portx - 1))
#define PIN_REG(portx) (*(&portx - 2))
#define BIT_READ(value, bit) (((value) >> (bit)) & 0x01)
#define BIT_SET(value, bit) ((value) |= (0x01 << (bit)))
#define BIT_CLEAR(value, bit) ((value) &= ~(0x01 << (bit)))
#define BIT_WRITE(value, bit, bitvalue) (bitvalue ? BIT_SET(value, bit) : BIT_CLEAR(value, bit))

#define DECODE_PORT(pin) ((pin < 8) ? PORTD : PORTB)
#define DECODE_BIT(pin) ((pin < 8) ? pin : (pin - 8))

//пин сенсора температуры D13 (для DS18B20) Управление портами через регистры Atmega
#define SENS_BIT DECODE_BIT(PIN_DS)
#define SENS_PORT DECODE_PORT(PIN_DS)

#define SENS_SET (BIT_SET(SENS_PORT, SENS_BIT))
#define SENS_CLEAR (BIT_CLEAR(SENS_PORT, SENS_BIT))
#define SENS_CHK (BIT_READ(PIN_REG(SENS_PORT), SENS_BIT))
#define SENS_LO (BIT_SET(DDR_REG(SENS_PORT), SENS_BIT))
#define SENS_HI (BIT_CLEAR(DDR_REG(SENS_PORT), SENS_BIT))
#define SENS_INIT \
  SENS_CLEAR; \
  SENS_HI

//Пин подсветки
#define BACKL_BIT DECODE_BIT(BACKL)
#define BACKL_PORT DECODE_PORT(BACKL)
#define BACKL_SET (BIT_SET(BACKL_PORT, BACKL_BIT))
#define BACKL_CLEAR (BIT_CLEAR(BACKL_PORT, BACKL_BIT))
#define BACKL_OUT (BIT_SET(DDR_REG(BACKL_PORT), BACKL_BIT))
#define BACKL_INIT \
  BACKL_CLEAR; \
  BACKL_OUT

const byte digitMask[] = { 7, 3, 6, 4, 1, 9, 8, 0, 5, 2 };    // маска дешифратора платы
const byte cathodeMask[] = { 1, 6, 2, 7, 5, 0, 4, 9, 8, 3 };  // порядок катодов
const byte opts[] = { KEY0, KEY1, KEY2, KEY3, KEY4, KEY5 };   // порядок индикаторов слева направо
// для моих плат подходит и к  ИН12 и ИН14


/*
  ард ног ном
  А0  7   4
  А1  6   2
  А2  4   8
  А3  3   1
*/